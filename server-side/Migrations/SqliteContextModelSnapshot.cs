// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server_side.Models;

#nullable disable

namespace server_side.Migrations
{
    [DbContext(typeof(SqliteContext))]
    partial class SqliteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("server_side.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double?>("BottomDiameter")
                        .HasColumnType("REAL")
                        .HasColumnName("bottom_diameter");

                    b.Property<string>("PartNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("part_number");

                    b.Property<double?>("TopDiameter")
                        .HasColumnType("REAL")
                        .HasColumnName("top_diameter");

                    b.HasKey("Id");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("server_side.Models.SectionShell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<long?>("SectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("section_id");

                    b.Property<long?>("ShellId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("shell_id");

                    b.Property<long?>("ShellPosition")
                        .HasColumnType("INTEGER")
                        .HasColumnName("shell_position");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("ShellId");

                    b.ToTable("section_shell", (string)null);
                });

            modelBuilder.Entity("server_side.Models.Shell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<double?>("BottomDiameter")
                        .HasColumnType("REAL")
                        .HasColumnName("bottom_diameter");

                    b.Property<double?>("Height")
                        .HasColumnType("REAL")
                        .HasColumnName("height");

                    b.Property<double?>("SteelDensity")
                        .HasColumnType("REAL")
                        .HasColumnName("steel_density");

                    b.Property<double?>("Thickness")
                        .HasColumnType("REAL")
                        .HasColumnName("thickness");

                    b.Property<double?>("TopDiameter")
                        .HasColumnType("REAL")
                        .HasColumnName("top_diameter");

                    b.HasKey("Id");

                    b.ToTable("shells", (string)null);
                });

            modelBuilder.Entity("server_side.Models.SectionShell", b =>
                {
                    b.HasOne("server_side.Models.Section", "Section")
                        .WithMany("SectionShells")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("server_side.Models.Shell", "Shell")
                        .WithMany("SectionShells")
                        .HasForeignKey("ShellId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Section");

                    b.Navigation("Shell");
                });

            modelBuilder.Entity("server_side.Models.Section", b =>
                {
                    b.Navigation("SectionShells");
                });

            modelBuilder.Entity("server_side.Models.Shell", b =>
                {
                    b.Navigation("SectionShells");
                });
#pragma warning restore 612, 618
        }
    }
}
